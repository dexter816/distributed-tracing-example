/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef zipkincore_TYPES_H
#define zipkincore_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace twitter { namespace zipkin { namespace thrift {

struct AnnotationType {
  enum type {
    BOOL = 0,
    BYTES = 1,
    I16 = 2,
    I32 = 3,
    I64 = 4,
    DOUBLE = 5,
    STRING = 6
  };
};

extern const std::map<int, const char*> _AnnotationType_VALUES_TO_NAMES;

class Endpoint;

class Annotation;

class BinaryAnnotation;

class Span;

class Response;

typedef struct _Endpoint__isset {
  _Endpoint__isset() : ipv4(false), port(false), service_name(false), ipv6(false) {}
  bool ipv4 :1;
  bool port :1;
  bool service_name :1;
  bool ipv6 :1;
} _Endpoint__isset;

class Endpoint {
 public:

  static const char* ascii_fingerprint; // = "66357C747F937372BB32913F3D70EB58";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0x35,0x7C,0x74,0x7F,0x93,0x73,0x72,0xBB,0x32,0x91,0x3F,0x3D,0x70,0xEB,0x58};

  Endpoint(const Endpoint&);
  Endpoint& operator=(const Endpoint&);
  Endpoint() : ipv4(0), port(0), service_name(), ipv6() {
  }

  virtual ~Endpoint() throw();
  int32_t ipv4;
  int16_t port;
  std::string service_name;
  std::string ipv6;

  _Endpoint__isset __isset;

  void __set_ipv4(const int32_t val);

  void __set_port(const int16_t val);

  void __set_service_name(const std::string& val);

  void __set_ipv6(const std::string& val);

  bool operator == (const Endpoint & rhs) const
  {
    if (!(ipv4 == rhs.ipv4))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    if (__isset.ipv6 != rhs.__isset.ipv6)
      return false;
    else if (__isset.ipv6 && !(ipv6 == rhs.ipv6))
      return false;
    return true;
  }
  bool operator != (const Endpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Endpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Endpoint& obj);
};

void swap(Endpoint &a, Endpoint &b);

typedef struct _Annotation__isset {
  _Annotation__isset() : timestamp(false), value(false), host(false) {}
  bool timestamp :1;
  bool value :1;
  bool host :1;
} _Annotation__isset;

class Annotation {
 public:

  static const char* ascii_fingerprint; // = "77D655C35F1C5F96E5B8E73F413F441D";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0xD6,0x55,0xC3,0x5F,0x1C,0x5F,0x96,0xE5,0xB8,0xE7,0x3F,0x41,0x3F,0x44,0x1D};

  Annotation(const Annotation&);
  Annotation& operator=(const Annotation&);
  Annotation() : timestamp(0), value() {
  }

  virtual ~Annotation() throw();
  int64_t timestamp;
  std::string value;
  Endpoint host;

  _Annotation__isset __isset;

  void __set_timestamp(const int64_t val);

  void __set_value(const std::string& val);

  void __set_host(const Endpoint& val);

  bool operator == (const Annotation & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.host != rhs.__isset.host)
      return false;
    else if (__isset.host && !(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const Annotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Annotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Annotation& obj);
};

void swap(Annotation &a, Annotation &b);

typedef struct _BinaryAnnotation__isset {
  _BinaryAnnotation__isset() : key(false), value(false), annotation_type(false), host(false) {}
  bool key :1;
  bool value :1;
  bool annotation_type :1;
  bool host :1;
} _BinaryAnnotation__isset;

class BinaryAnnotation {
 public:

  static const char* ascii_fingerprint; // = "2958175D0B61AE00D73A812C2A801378";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0x58,0x17,0x5D,0x0B,0x61,0xAE,0x00,0xD7,0x3A,0x81,0x2C,0x2A,0x80,0x13,0x78};

  BinaryAnnotation(const BinaryAnnotation&);
  BinaryAnnotation& operator=(const BinaryAnnotation&);
  BinaryAnnotation() : key(), value(), annotation_type((AnnotationType::type)0) {
  }

  virtual ~BinaryAnnotation() throw();
  std::string key;
  std::string value;
  AnnotationType::type annotation_type;
  Endpoint host;

  _BinaryAnnotation__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_annotation_type(const AnnotationType::type val);

  void __set_host(const Endpoint& val);

  bool operator == (const BinaryAnnotation & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(annotation_type == rhs.annotation_type))
      return false;
    if (__isset.host != rhs.__isset.host)
      return false;
    else if (__isset.host && !(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const BinaryAnnotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BinaryAnnotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BinaryAnnotation& obj);
};

void swap(BinaryAnnotation &a, BinaryAnnotation &b);

typedef struct _Span__isset {
  _Span__isset() : trace_id(false), name(false), id(false), parent_id(false), annotations(false), binary_annotations(false), debug(true), timestamp(false), duration(false), trace_id_high(false) {}
  bool trace_id :1;
  bool name :1;
  bool id :1;
  bool parent_id :1;
  bool annotations :1;
  bool binary_annotations :1;
  bool debug :1;
  bool timestamp :1;
  bool duration :1;
  bool trace_id_high :1;
} _Span__isset;

class Span {
 public:

  static const char* ascii_fingerprint; // = "C330BF2126606A01410464497BC83FE1";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x30,0xBF,0x21,0x26,0x60,0x6A,0x01,0x41,0x04,0x64,0x49,0x7B,0xC8,0x3F,0xE1};

  Span(const Span&);
  Span& operator=(const Span&);
  Span() : trace_id(0), name(), id(0), parent_id(0), debug(false), timestamp(0), duration(0), trace_id_high(0) {
  }

  virtual ~Span() throw();
  int64_t trace_id;
  std::string name;
  int64_t id;
  int64_t parent_id;
  std::vector<Annotation>  annotations;
  std::vector<BinaryAnnotation>  binary_annotations;
  bool debug;
  int64_t timestamp;
  int64_t duration;
  int64_t trace_id_high;

  _Span__isset __isset;

  void __set_trace_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_id(const int64_t val);

  void __set_parent_id(const int64_t val);

  void __set_annotations(const std::vector<Annotation> & val);

  void __set_binary_annotations(const std::vector<BinaryAnnotation> & val);

  void __set_debug(const bool val);

  void __set_timestamp(const int64_t val);

  void __set_duration(const int64_t val);

  void __set_trace_id_high(const int64_t val);

  bool operator == (const Span & rhs) const
  {
    if (!(trace_id == rhs.trace_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (__isset.parent_id != rhs.__isset.parent_id)
      return false;
    else if (__isset.parent_id && !(parent_id == rhs.parent_id))
      return false;
    if (!(annotations == rhs.annotations))
      return false;
    if (!(binary_annotations == rhs.binary_annotations))
      return false;
    if (__isset.debug != rhs.__isset.debug)
      return false;
    else if (__isset.debug && !(debug == rhs.debug))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    if (__isset.trace_id_high != rhs.__isset.trace_id_high)
      return false;
    else if (__isset.trace_id_high && !(trace_id_high == rhs.trace_id_high))
      return false;
    return true;
  }
  bool operator != (const Span &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Span & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Span& obj);
};

void swap(Span &a, Span &b);


class Response {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : ok(0) {
  }

  virtual ~Response() throw();
  bool ok;

  void __set_ok(const bool val);

  bool operator == (const Response & rhs) const
  {
    if (!(ok == rhs.ok))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Response& obj);
};

void swap(Response &a, Response &b);

}}} // namespace

#endif
