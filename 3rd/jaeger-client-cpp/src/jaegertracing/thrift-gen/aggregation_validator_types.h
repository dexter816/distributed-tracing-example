/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef aggregation_validator_TYPES_H
#define aggregation_validator_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace jaegertracing { namespace thrift {

class ValidateTraceResponse;


class ValidateTraceResponse {
 public:

  static const char* ascii_fingerprint; // = "92DB7C08FAF226B322B117D193F35B5F";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0xDB,0x7C,0x08,0xFA,0xF2,0x26,0xB3,0x22,0xB1,0x17,0xD1,0x93,0xF3,0x5B,0x5F};

  ValidateTraceResponse(const ValidateTraceResponse&);
  ValidateTraceResponse& operator=(const ValidateTraceResponse&);
  ValidateTraceResponse() : ok(0), traceCount(0) {
  }

  virtual ~ValidateTraceResponse() throw();
  bool ok;
  int64_t traceCount;

  void __set_ok(const bool val);

  void __set_traceCount(const int64_t val);

  bool operator == (const ValidateTraceResponse & rhs) const
  {
    if (!(ok == rhs.ok))
      return false;
    if (!(traceCount == rhs.traceCount))
      return false;
    return true;
  }
  bool operator != (const ValidateTraceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValidateTraceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ValidateTraceResponse& obj);
};

void swap(ValidateTraceResponse &a, ValidateTraceResponse &b);

}} // namespace

#endif
