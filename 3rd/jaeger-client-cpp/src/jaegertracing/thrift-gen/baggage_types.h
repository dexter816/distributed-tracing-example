/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef baggage_TYPES_H
#define baggage_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace jaegertracing { namespace thrift {

class BaggageRestriction;


class BaggageRestriction {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  BaggageRestriction(const BaggageRestriction&);
  BaggageRestriction& operator=(const BaggageRestriction&);
  BaggageRestriction() : baggageKey(), maxValueLength(0) {
  }

  virtual ~BaggageRestriction() throw();
  std::string baggageKey;
  int32_t maxValueLength;

  void __set_baggageKey(const std::string& val);

  void __set_maxValueLength(const int32_t val);

  bool operator == (const BaggageRestriction & rhs) const
  {
    if (!(baggageKey == rhs.baggageKey))
      return false;
    if (!(maxValueLength == rhs.maxValueLength))
      return false;
    return true;
  }
  bool operator != (const BaggageRestriction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaggageRestriction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BaggageRestriction& obj);
};

void swap(BaggageRestriction &a, BaggageRestriction &b);

}} // namespace

#endif
