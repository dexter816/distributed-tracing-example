/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sampling_TYPES_H
#define sampling_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace jaegertracing { namespace sampling_manager { namespace thrift {

struct SamplingStrategyType {
  enum type {
    PROBABILISTIC = 0,
    RATE_LIMITING = 1
  };
};

extern const std::map<int, const char*> _SamplingStrategyType_VALUES_TO_NAMES;

class ProbabilisticSamplingStrategy;

class RateLimitingSamplingStrategy;

class OperationSamplingStrategy;

class PerOperationSamplingStrategies;

class SamplingStrategyResponse;


class ProbabilisticSamplingStrategy {
 public:

  static const char* ascii_fingerprint; // = "66FFB53A2471384C03D9F21F6FACA58F";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xFF,0xB5,0x3A,0x24,0x71,0x38,0x4C,0x03,0xD9,0xF2,0x1F,0x6F,0xAC,0xA5,0x8F};

  ProbabilisticSamplingStrategy(const ProbabilisticSamplingStrategy&);
  ProbabilisticSamplingStrategy& operator=(const ProbabilisticSamplingStrategy&);
  ProbabilisticSamplingStrategy() : samplingRate(0) {
  }

  virtual ~ProbabilisticSamplingStrategy() throw();
  double samplingRate;

  void __set_samplingRate(const double val);

  bool operator == (const ProbabilisticSamplingStrategy & rhs) const
  {
    if (!(samplingRate == rhs.samplingRate))
      return false;
    return true;
  }
  bool operator != (const ProbabilisticSamplingStrategy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProbabilisticSamplingStrategy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProbabilisticSamplingStrategy& obj);
};

void swap(ProbabilisticSamplingStrategy &a, ProbabilisticSamplingStrategy &b);


class RateLimitingSamplingStrategy {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  RateLimitingSamplingStrategy(const RateLimitingSamplingStrategy&);
  RateLimitingSamplingStrategy& operator=(const RateLimitingSamplingStrategy&);
  RateLimitingSamplingStrategy() : maxTracesPerSecond(0) {
  }

  virtual ~RateLimitingSamplingStrategy() throw();
  int16_t maxTracesPerSecond;

  void __set_maxTracesPerSecond(const int16_t val);

  bool operator == (const RateLimitingSamplingStrategy & rhs) const
  {
    if (!(maxTracesPerSecond == rhs.maxTracesPerSecond))
      return false;
    return true;
  }
  bool operator != (const RateLimitingSamplingStrategy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RateLimitingSamplingStrategy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RateLimitingSamplingStrategy& obj);
};

void swap(RateLimitingSamplingStrategy &a, RateLimitingSamplingStrategy &b);


class OperationSamplingStrategy {
 public:

  static const char* ascii_fingerprint; // = "70EB2FAA425B0221EA90513B35A43D26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xEB,0x2F,0xAA,0x42,0x5B,0x02,0x21,0xEA,0x90,0x51,0x3B,0x35,0xA4,0x3D,0x26};

  OperationSamplingStrategy(const OperationSamplingStrategy&);
  OperationSamplingStrategy& operator=(const OperationSamplingStrategy&);
  OperationSamplingStrategy() : operation() {
  }

  virtual ~OperationSamplingStrategy() throw();
  std::string operation;
  ProbabilisticSamplingStrategy probabilisticSampling;

  void __set_operation(const std::string& val);

  void __set_probabilisticSampling(const ProbabilisticSamplingStrategy& val);

  bool operator == (const OperationSamplingStrategy & rhs) const
  {
    if (!(operation == rhs.operation))
      return false;
    if (!(probabilisticSampling == rhs.probabilisticSampling))
      return false;
    return true;
  }
  bool operator != (const OperationSamplingStrategy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationSamplingStrategy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OperationSamplingStrategy& obj);
};

void swap(OperationSamplingStrategy &a, OperationSamplingStrategy &b);

typedef struct _PerOperationSamplingStrategies__isset {
  _PerOperationSamplingStrategies__isset() : defaultUpperBoundTracesPerSecond(false) {}
  bool defaultUpperBoundTracesPerSecond :1;
} _PerOperationSamplingStrategies__isset;

class PerOperationSamplingStrategies {
 public:

  static const char* ascii_fingerprint; // = "886A56A82DE9A0B1E1EDA82291918978";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x6A,0x56,0xA8,0x2D,0xE9,0xA0,0xB1,0xE1,0xED,0xA8,0x22,0x91,0x91,0x89,0x78};

  PerOperationSamplingStrategies(const PerOperationSamplingStrategies&);
  PerOperationSamplingStrategies& operator=(const PerOperationSamplingStrategies&);
  PerOperationSamplingStrategies() : defaultSamplingProbability(0), defaultLowerBoundTracesPerSecond(0), defaultUpperBoundTracesPerSecond(0) {
  }

  virtual ~PerOperationSamplingStrategies() throw();
  double defaultSamplingProbability;
  double defaultLowerBoundTracesPerSecond;
  std::vector<OperationSamplingStrategy>  perOperationStrategies;
  double defaultUpperBoundTracesPerSecond;

  _PerOperationSamplingStrategies__isset __isset;

  void __set_defaultSamplingProbability(const double val);

  void __set_defaultLowerBoundTracesPerSecond(const double val);

  void __set_perOperationStrategies(const std::vector<OperationSamplingStrategy> & val);

  void __set_defaultUpperBoundTracesPerSecond(const double val);

  bool operator == (const PerOperationSamplingStrategies & rhs) const
  {
    if (!(defaultSamplingProbability == rhs.defaultSamplingProbability))
      return false;
    if (!(defaultLowerBoundTracesPerSecond == rhs.defaultLowerBoundTracesPerSecond))
      return false;
    if (!(perOperationStrategies == rhs.perOperationStrategies))
      return false;
    if (__isset.defaultUpperBoundTracesPerSecond != rhs.__isset.defaultUpperBoundTracesPerSecond)
      return false;
    else if (__isset.defaultUpperBoundTracesPerSecond && !(defaultUpperBoundTracesPerSecond == rhs.defaultUpperBoundTracesPerSecond))
      return false;
    return true;
  }
  bool operator != (const PerOperationSamplingStrategies &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PerOperationSamplingStrategies & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PerOperationSamplingStrategies& obj);
};

void swap(PerOperationSamplingStrategies &a, PerOperationSamplingStrategies &b);

typedef struct _SamplingStrategyResponse__isset {
  _SamplingStrategyResponse__isset() : probabilisticSampling(false), rateLimitingSampling(false), operationSampling(false) {}
  bool probabilisticSampling :1;
  bool rateLimitingSampling :1;
  bool operationSampling :1;
} _SamplingStrategyResponse__isset;

class SamplingStrategyResponse {
 public:

  static const char* ascii_fingerprint; // = "D7657EDA3B19BAB27401BDBDD4E1103A";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x65,0x7E,0xDA,0x3B,0x19,0xBA,0xB2,0x74,0x01,0xBD,0xBD,0xD4,0xE1,0x10,0x3A};

  SamplingStrategyResponse(const SamplingStrategyResponse&);
  SamplingStrategyResponse& operator=(const SamplingStrategyResponse&);
  SamplingStrategyResponse() : strategyType((SamplingStrategyType::type)0) {
  }

  virtual ~SamplingStrategyResponse() throw();
  SamplingStrategyType::type strategyType;
  ProbabilisticSamplingStrategy probabilisticSampling;
  RateLimitingSamplingStrategy rateLimitingSampling;
  PerOperationSamplingStrategies operationSampling;

  _SamplingStrategyResponse__isset __isset;

  void __set_strategyType(const SamplingStrategyType::type val);

  void __set_probabilisticSampling(const ProbabilisticSamplingStrategy& val);

  void __set_rateLimitingSampling(const RateLimitingSamplingStrategy& val);

  void __set_operationSampling(const PerOperationSamplingStrategies& val);

  bool operator == (const SamplingStrategyResponse & rhs) const
  {
    if (!(strategyType == rhs.strategyType))
      return false;
    if (__isset.probabilisticSampling != rhs.__isset.probabilisticSampling)
      return false;
    else if (__isset.probabilisticSampling && !(probabilisticSampling == rhs.probabilisticSampling))
      return false;
    if (__isset.rateLimitingSampling != rhs.__isset.rateLimitingSampling)
      return false;
    else if (__isset.rateLimitingSampling && !(rateLimitingSampling == rhs.rateLimitingSampling))
      return false;
    if (__isset.operationSampling != rhs.__isset.operationSampling)
      return false;
    else if (__isset.operationSampling && !(operationSampling == rhs.operationSampling))
      return false;
    return true;
  }
  bool operator != (const SamplingStrategyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SamplingStrategyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SamplingStrategyResponse& obj);
};

void swap(SamplingStrategyResponse &a, SamplingStrategyResponse &b);

}}} // namespace

#endif
