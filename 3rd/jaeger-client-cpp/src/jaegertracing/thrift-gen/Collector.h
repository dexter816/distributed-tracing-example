/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Collector_H
#define Collector_H

#include <thrift/TDispatchProcessor.h>
#include "jaeger_types.h"

namespace jaegertracing { namespace thrift {

class CollectorIf {
 public:
  virtual ~CollectorIf() {}
  virtual void submitBatches(std::vector<BatchSubmitResponse> & _return, const std::vector<Batch> & batches) = 0;
};

class CollectorIfFactory {
 public:
  typedef CollectorIf Handler;

  virtual ~CollectorIfFactory() {}

  virtual CollectorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CollectorIf* /* handler */) = 0;
};

class CollectorIfSingletonFactory : virtual public CollectorIfFactory {
 public:
  CollectorIfSingletonFactory(const boost::shared_ptr<CollectorIf>& iface) : iface_(iface) {}
  virtual ~CollectorIfSingletonFactory() {}

  virtual CollectorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CollectorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CollectorIf> iface_;
};

class CollectorNull : virtual public CollectorIf {
 public:
  virtual ~CollectorNull() {}
  void submitBatches(std::vector<BatchSubmitResponse> & /* _return */, const std::vector<Batch> & /* batches */) {
    return;
  }
};

typedef struct _Collector_submitBatches_args__isset {
  _Collector_submitBatches_args__isset() : batches(false) {}
  bool batches :1;
} _Collector_submitBatches_args__isset;

class Collector_submitBatches_args {
 public:

  static const char* ascii_fingerprint; // = "B3672015D2EC74183915D15C37A67BE0";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x67,0x20,0x15,0xD2,0xEC,0x74,0x18,0x39,0x15,0xD1,0x5C,0x37,0xA6,0x7B,0xE0};

  Collector_submitBatches_args(const Collector_submitBatches_args&);
  Collector_submitBatches_args& operator=(const Collector_submitBatches_args&);
  Collector_submitBatches_args() {
  }

  virtual ~Collector_submitBatches_args() throw();
  std::vector<Batch>  batches;

  _Collector_submitBatches_args__isset __isset;

  void __set_batches(const std::vector<Batch> & val);

  bool operator == (const Collector_submitBatches_args & rhs) const
  {
    if (!(batches == rhs.batches))
      return false;
    return true;
  }
  bool operator != (const Collector_submitBatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collector_submitBatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Collector_submitBatches_args& obj);
};


class Collector_submitBatches_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3672015D2EC74183915D15C37A67BE0";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x67,0x20,0x15,0xD2,0xEC,0x74,0x18,0x39,0x15,0xD1,0x5C,0x37,0xA6,0x7B,0xE0};


  virtual ~Collector_submitBatches_pargs() throw();
  const std::vector<Batch> * batches;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Collector_submitBatches_pargs& obj);
};

typedef struct _Collector_submitBatches_result__isset {
  _Collector_submitBatches_result__isset() : success(false) {}
  bool success :1;
} _Collector_submitBatches_result__isset;

class Collector_submitBatches_result {
 public:

  static const char* ascii_fingerprint; // = "CBD1A3538AA40917A7704428034B61EC";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0xD1,0xA3,0x53,0x8A,0xA4,0x09,0x17,0xA7,0x70,0x44,0x28,0x03,0x4B,0x61,0xEC};

  Collector_submitBatches_result(const Collector_submitBatches_result&);
  Collector_submitBatches_result& operator=(const Collector_submitBatches_result&);
  Collector_submitBatches_result() {
  }

  virtual ~Collector_submitBatches_result() throw();
  std::vector<BatchSubmitResponse>  success;

  _Collector_submitBatches_result__isset __isset;

  void __set_success(const std::vector<BatchSubmitResponse> & val);

  bool operator == (const Collector_submitBatches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collector_submitBatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collector_submitBatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Collector_submitBatches_result& obj);
};

typedef struct _Collector_submitBatches_presult__isset {
  _Collector_submitBatches_presult__isset() : success(false) {}
  bool success :1;
} _Collector_submitBatches_presult__isset;

class Collector_submitBatches_presult {
 public:

  static const char* ascii_fingerprint; // = "CBD1A3538AA40917A7704428034B61EC";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0xD1,0xA3,0x53,0x8A,0xA4,0x09,0x17,0xA7,0x70,0x44,0x28,0x03,0x4B,0x61,0xEC};


  virtual ~Collector_submitBatches_presult() throw();
  std::vector<BatchSubmitResponse> * success;

  _Collector_submitBatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Collector_submitBatches_presult& obj);
};

class CollectorClient : virtual public CollectorIf {
 public:
  CollectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CollectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void submitBatches(std::vector<BatchSubmitResponse> & _return, const std::vector<Batch> & batches);
  void send_submitBatches(const std::vector<Batch> & batches);
  void recv_submitBatches(std::vector<BatchSubmitResponse> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CollectorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CollectorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CollectorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_submitBatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CollectorProcessor(boost::shared_ptr<CollectorIf> iface) :
    iface_(iface) {
    processMap_["submitBatches"] = &CollectorProcessor::process_submitBatches;
  }

  virtual ~CollectorProcessor() {}
};

class CollectorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CollectorProcessorFactory(const ::boost::shared_ptr< CollectorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CollectorIfFactory > handlerFactory_;
};

class CollectorMultiface : virtual public CollectorIf {
 public:
  CollectorMultiface(std::vector<boost::shared_ptr<CollectorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CollectorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CollectorIf> > ifaces_;
  CollectorMultiface() {}
  void add(boost::shared_ptr<CollectorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void submitBatches(std::vector<BatchSubmitResponse> & _return, const std::vector<Batch> & batches) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submitBatches(_return, batches);
    }
    ifaces_[i]->submitBatches(_return, batches);
    return;
  }

};

}} // namespace

#endif
